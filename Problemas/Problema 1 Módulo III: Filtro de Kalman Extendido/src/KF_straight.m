%--------------------------------------------------------------------------
%--------------------------------------------------------------------------
% 2022-11, Madrid, X. Chen
%--------------------------------------------------------------------------
%--------------------------------------------------------------------------
% Kalman Filter, straight line with constant acceleration control input
%--------------------------------------------------------------------------
%--------------------------------------------------------------------------

function [mu, cov, z_bar, inn, z, x_real]= KF_straight...
    (dt, num_itr, parm_OB, parm_RW)
%-------------------------------------------------------------------------- 
% Kalman Filter, straight line with constant acceleration control input
%-------------------------------------------------------------------------- 
%---------------------------------Input------------------------------------
%-------------------------------------------------------------------------- 
% ---> dt [s] 
%      [1:1], time duration at each step
% ---> num_itr 
%      [1:1], number of iterations
% ---> parm_RW.p_0 [m] 
%      [1:1], initial position
% ---> parm_RW.v_0 [m/s] 
%      [1:1], initial velocity
% ---> parm_RW.u_cmd [m/s^2]
%      [1:1], commanded constant acceleration 
% ---> parm_RW.delta_acc [m/s^2]
%      [1:1], standard deviation of accelerometer noise
% ---> parm_RW.delta_range [m]
%      [1:1], standard deviation of range measurement noise
% ---> parm_OB.delta_acc [m/s^2]
%      [1:1], standard deviation of accelerometer noise
% ---> parm_OB.delta_range [m]
%      [1:1], standard deviation of range measurement noise
% ---> parm_OB.mu_0 [m; m/s]
%      [2:1], initial state estimate
% ---> parm_OB.cov_0 [m^2 m^2/s; m^2/s m^2/s^2]
%      [2:2], initial error covariance estimate
%-------------------------------------------------------------------------- 
%---------------------------------Output-----------------------------------
%--------------------------------------------------------------------------
% ---> mu [m; m/s]
%      [2:num_itr+1], state estimation from KF at each time step
% ---> cov [m^2 m^2/s; m^2/s m^2/s^2]
%      [2:2:num_itr+1], covariance matrix from KF at each time step
% ---> z_bar [m]
%      [1:num_itr+1], range measurement predicted by KF
% ---> inn [m]
%      [1:num_itr+1], innovation vector in KF at each time step
% ---> z [m]
%      [1:num_itr+1], range measurement simulated in the real world
% ---> x_real [m; m/s]
%      [2:num_itr+1], state simulated in the real world
%-------------------------------------------------------------------------- 
 
[x_real, u, z] = mod_RW(dt, num_itr, parm_RW);
[mu, cov, z_bar, inn] = mod_OB(dt, num_itr, parm_OB, u, z);

end
 
function [x_real, u, z] = mod_RW(dt, num_itr, parm_RW)
%-------------------------------------------------------------------------- 
% Real world simulation module
%-------------------------------------------------------------------------- 
%---------------------------------Input------------------------------------
%-------------------------------------------------------------------------- 
% ---> dt [s] 
%      [1:1], time duration at each step
% ---> num_itr 
%      [1:1], number of iterations
% ---> parm_RW.p_0 [m] 
%      [1:1], initial position
% ---> parm_RW.v_0 [m/s] 
%      [1:1], initial velocity
% ---> parm_RW.u_cmd [m/s^2]
%      [1:1], commanded constant acceleration 
% ---> parm_RW.delta_acc [m/s^2]
%      [1:1], standard deviation of accelerometer noise
% ---> parm_RW.delta_range [m]
%      [1:1], standard deviation of range measurement noise 
%-------------------------------------------------------------------------- 
%---------------------------------Output-----------------------------------
%-------------------------------------------------------------------------- 
% ---> x_real [m; m/s]
%      [2:num_itr+1], simulated state 
% ---> u [m]
%      [1:num_itr+1], simulated accelerameter measurement 
% ---> z [m]
%      [1:num_itr+1], simulated range measurement 
%-------------------------------------------------------------------------- 
x_real = zeros(2, num_itr+1);
% [2:num_itr+1], each column is the state vector    
% The initial state at t=0 is [0,0] in real world; 
z = zeros(1, num_itr+1);
% [num_itr+1:1], each column is the range finder measurement p_range.
% This will be used in the KF algorithm as sensor measurement input
u = zeros(1, num_itr+1);
% [num_itr+1:1], each column is the accelerameter measurement a_acc.
% This will be used in the KF algorithm as sensor control input

%% Linear state model (A amd B) and observation model (C)

%--------------------------------------------------------------------------
%--------------------------------------------------------------------------
%--------------------------------------------------------------------------
%--------------------------------------------------------------------------
%------------------------Add your code here--------------------------------
%--------------------------------------------------------------------------
%--------------------------------------------------------------------------
%--------------------------------------------------------------------------
%-------------------------------------------------------------------------- 

%% Initial condition

%--------------------------------------------------------------------------
%--------------------------------------------------------------------------
%--------------------------------------------------------------------------
%--------------------------------------------------------------------------
%------------------------Add your code here--------------------------------
%--------------------------------------------------------------------------
%--------------------------------------------------------------------------
%--------------------------------------------------------------------------
%-------------------------------------------------------------------------- 

%% Simulated state (Euler method) and acceleromete/range measurements
i=2;
while i<= num_itr+1

%--------------------------------------------------------------------------
%--------------------------------------------------------------------------
%--------------------------------------------------------------------------
%--------------------------------------------------------------------------
%------------------------Add your code here--------------------------------
%--------------------------------------------------------------------------
%--------------------------------------------------------------------------
%--------------------------------------------------------------------------
%-------------------------------------------------------------------------- 
    i=i+1;
end
 
end

function [mu, cov, z_bar, inn] = mod_OB(dt, num_itr, parm_OB, u, z)
%-------------------------------------------------------------------------- 
% Onboard software module
%-------------------------------------------------------------------------- 
%---------------------------------Input------------------------------------
%-------------------------------------------------------------------------- 
% ---> dt [s] 
%      [1:1], time duration at each step
% ---> num_itr 
%      [1:1], number of iterations 
% ---> parm_OB.delta_acc [m/s^2]
%      [1:1], standard deviation of accelerometer noise
% ---> parm_OB.delta_range [m]
%      [1:1], standard deviation of range measurement noise
% ---> parm_OB.mu_0 [m; m/s]
%      [2:1], initial guess of position and velocity
% ---> parm_OB.cov_0 [m^2 m^2/s; m^2/s m^2/s^2]
%      [2:2], initial covariance matrix
%-------------------------------------------------------------------------- 
%---------------------------------Output-----------------------------------
%--------------------------------------------------------------------------
% ---> mu [m; m/s]
%      [2:num_itr+1], state estimation from KF at each time step
% ---> cov [m^2 m^2/s; m^2/s m^2/s^2]
%      [2:2:num_itr+1], covariance matrix from KF at each time step
% ---> z_bar [m]
%      [1:num_itr+1], range measurement simulated in the real world
% ---> inn [m]
%      [1:num_itr+1], innovation vector in KF at each time step 
%-------------------------------------------------------------------------- 
 
mu_bar  = zeros(2, num_itr+1);
% [2:num_itr+1], each column is the predicted state estimate
mu      = zeros(2, num_itr+1);
% [2:num_itr+1], each column is the updated state estimate
cov_bar = zeros(2, 2, num_itr+1);
% [2:2:num_itr+1], each page the the predicted error covariance 
cov     = zeros(2, 2, num_itr+1);
% [2:2:num_itr+1], each page the the updated error covariance 
z_bar   =  zeros(1, num_itr+1);
% [1:num_itr+1], each column is the predicted measurement.
inn     =  zeros(1, num_itr+1);
% [1:num_itr+1], each column is the innovation.

%% KF state model and observation model

%--------------------------------------------------------------------------
%--------------------------------------------------------------------------
%--------------------------------------------------------------------------
%--------------------------------------------------------------------------
%------------------------Add your code here--------------------------------
%--------------------------------------------------------------------------
%--------------------------------------------------------------------------
%--------------------------------------------------------------------------
%-------------------------------------------------------------------------- 


%% Initial estimate and error covariance

%--------------------------------------------------------------------------
%--------------------------------------------------------------------------
%--------------------------------------------------------------------------
%--------------------------------------------------------------------------
%------------------------Add your code here--------------------------------
%--------------------------------------------------------------------------
%--------------------------------------------------------------------------
%--------------------------------------------------------------------------
%-------------------------------------------------------------------------- 

%% Recursive Kalman Filter Algorithm
i=2;
while i<= num_itr+1

%--------------------------------------------------------------------------
%--------------------------------------------------------------------------
%--------------------------------------------------------------------------
%--------------------------------------------------------------------------
%------------------------Add your code here--------------------------------
%--------------------------------------------------------------------------
%--------------------------------------------------------------------------
%--------------------------------------------------------------------------
%-------------------------------------------------------------------------- 
     
    i=i+1;
end
 
end
